services:
  app:
    container_name: golang
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
    tty: true
    build:
      context: .
      dockerfile: docker/local/Dockerfile
    ports:
      - "8000:8080"
    restart: on-failure
    volumes:
      - ./:/IMP
    depends_on:
      - db
    networks:
      - imp
    command: tail -f /dev/null

  app_tests:
    container_name: tests
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
    tty: true
    build:
      context: .
      dockerfile: docker/local/Dockerfile
    ports:
      - "8001:8080"
    restart: on-failure
    volumes:
      - ./:/IMP
    depends_on:
      - db
    networks:
      - imp

  scheduler:
    container_name: scheduler
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
    tty: true
    build:
      context: .
      dockerfile: docker/local/Dockerfile
    restart: on-failure
    volumes:
      - ./:/IMP
    depends_on:
      - db
    networks:
      - imp
    command: go run main.go cron

  db:
    image: postgres:16.6
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '5432:5432'
    volumes:
      - ./_db/pg_data:/var/lib/postgresql/data
    networks:
      - imp

volumes:
  pg_data:

# Networks to be created to facilitate communication between containers
networks:
  imp:
    driver: bridge