// Code generated by MockGen. DO NOT EDIT.
// Source: app/pkg/time_utils/time_utils.go

// Package time_utils is a generated GoMock package.
package time_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeUtilsInterface is a mock of TimeUtilsInterface interface.
type MockTimeUtilsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeUtilsInterfaceMockRecorder
}

// MockTimeUtilsInterfaceMockRecorder is the mock recorder for MockTimeUtilsInterface.
type MockTimeUtilsInterfaceMockRecorder struct {
	mock *MockTimeUtilsInterface
}

// NewMockTimeUtilsInterface creates a new mock instance.
func NewMockTimeUtilsInterface(ctrl *gomock.Controller) *MockTimeUtilsInterface {
	mock := &MockTimeUtilsInterface{ctrl: ctrl}
	mock.recorder = &MockTimeUtilsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeUtilsInterface) EXPECT() *MockTimeUtilsInterfaceMockRecorder {
	return m.recorder
}

// FormattedMinutesToSeconds mocks base method.
func (m *MockTimeUtilsInterface) FormattedMinutesToSeconds(timeStr, pattern string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormattedMinutesToSeconds", timeStr, pattern)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormattedMinutesToSeconds indicates an expected call of FormattedMinutesToSeconds.
func (mr *MockTimeUtilsInterfaceMockRecorder) FormattedMinutesToSeconds(timeStr, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormattedMinutesToSeconds", reflect.TypeOf((*MockTimeUtilsInterface)(nil).FormattedMinutesToSeconds), timeStr, pattern)
}
