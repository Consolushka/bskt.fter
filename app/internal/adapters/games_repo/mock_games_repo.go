// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/ports/games_repo.go

// Package mock_ports is a generated GoMock package.
package games_repo

import (
	games "IMP/app/internal/core/games"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGamesRepo is a mock of GamesRepo interface.
type MockGamesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGamesRepoMockRecorder
}

// MockGamesRepoMockRecorder is the mock recorder for MockGamesRepo.
type MockGamesRepoMockRecorder struct {
	mock *MockGamesRepo
}

// NewMockGamesRepo creates a new mock instance.
func NewMockGamesRepo(ctrl *gomock.Controller) *MockGamesRepo {
	mock := &MockGamesRepo{ctrl: ctrl}
	mock.recorder = &MockGamesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGamesRepo) EXPECT() *MockGamesRepoMockRecorder {
	return m.recorder
}

// FindOrCreateGame mocks base method.
func (m *MockGamesRepo) FindOrCreateGame(model games.GameModel) (games.GameModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateGame", model)
	ret0, _ := ret[0].(games.GameModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateGame indicates an expected call of FindOrCreateGame.
func (mr *MockGamesRepoMockRecorder) FindOrCreateGame(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateGame", reflect.TypeOf((*MockGamesRepo)(nil).FindOrCreateGame), model)
}
